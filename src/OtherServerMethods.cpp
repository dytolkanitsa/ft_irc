//
// Created by shaurmyashka on 10/24/21.
//

#include <cstring>
#include "Server.hpp"
#include "User.hpp"
#include "Channel.hpp"

/**
 * —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param fd —Ñ–¥—à–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
std::string Server::recvMessage(int fd) {
	char message[512];
	ssize_t recvByte;
	memset(message, '\0', sizeof(message));
	recvByte = recv(fd, message, sizeof(message), 0);
	if (recvByte <= 0) {
		throw std::runtime_error("recv < 0");
	}
	std::cout << "üí¨ ‚û° " << message << " ‚¨Ö üê¢" << std::endl;
	return (message);
}

/**
 * –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –µ–º—É –∏–º–µ–Ω–µ–º(–ø–æ–∂–µ–ª–∞–µ–º –µ–º—É —É–¥–∞—á–∏!)
 * @param userName –∏–º—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
 * @return —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∏–º–µ–Ω–µ–º –∏–ª–∏ nullptr
 */
User *Server::findUserByName(const std::string &userName) const {
	for (unsigned int i = 0; i < this->users.size(); i++) {
		if (users[i]->getNickName() == userName) {
			return users[i];
		}
	}
	return nullptr;
}

/**
* —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–¥–µ–ª—è—è –∞–≥—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ ':'
* @param argString —Å—Ç—Ä–æ–∫–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
* @return –≤–µ–∫—Ç–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
*/
std::vector<std::string> Server::setArgs(std::string argString) {
	std::vector<std::string> args;
	std::string lastArg;
	size_t pos = 0;
	size_t newPos;

	newPos = argString.find("\r\n");
	if (newPos != std::string::npos) {
		argString = argString.substr(0, newPos);
	} else {
		newPos = argString.find('\n');
		if (newPos != std::string::npos) {
			argString = argString.substr(0, newPos);
		}
	}
	if (argString.empty()) {
		return args;
	}
	unsigned long spaceSkip = argString.length() - 1;
	while (argString[spaceSkip] == ' ' && spaceSkip != 0) {
		spaceSkip--;
	}
	if (spaceSkip != 0) {
		argString = argString.substr(0, spaceSkip + 1);
	}
	newPos = argString.find(':', 0);
	if (newPos != std::string::npos) {
		lastArg = argString.substr(newPos + 1);
		argString.erase(newPos);
	}
	int i;
	for (i = 0;; i++) {
		newPos = argString.find(' ', pos);
		if (newPos == std::string::npos) {
			args.push_back(argString.substr(pos, newPos - pos));
			break;
		}
		args.push_back(argString.substr(pos, newPos - pos));
		while (argString[newPos + 1] && argString[newPos + 1] == ' ') {
			newPos++;
		}
		pos = newPos + 1;
	}
	if (!lastArg.empty())
		args[i] = lastArg;
	return args;
}

/**
 * –ø—ã—Ç–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º
 * @param channelName –∏–º—è –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
 * @return —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ nullptr –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
 */
Channel *Server::findChannelByName(const std::string& channelName) {
	for (unsigned int i = 0; i < this->channels.size(); i++) {
		if (channelName == this->channels[i]->getChannelName()) {
			return this->channels[i];
		}
	}
	return nullptr;
}

/**
 * –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º —Ñ–¥—à–Ω–∏–∫–æ–º
 * @param fd –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–¥
 * @return –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ nullptr, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª
 */
User *Server::findUserByFd(int fd) {
	for (unsigned int i = 0; i < this->users.size(); i++) {
		if (fd == this->users[i]->getSocketFd()) {
			return this->users[i];
		}
	}
	return nullptr;
}

/**
 * —Å–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –≤–µ–∫—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —é–∑–µ—Ä–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª,
 * –∞ —Ç–∞–∫ –∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª —é–∑–µ—Ä—É –≤ –≤–µ–∫—Ç–æ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
 * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤—à–∏–π –∫–∞–Ω–∞–ª
 * @param name –∏–º—è –∫–∞–Ω–∞–ª–∞
 */
Channel *Server::createChannel(User *user, std::string name) {
	Channel *channel = new Channel(name);
	channels.push_back(channel);
	user->addChannel(channel);
	channel->setUser(user);
	channel->setOperators(user);
	return channel;
}

/**
 * —É–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–∫–∏–¥–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã)
 * @param user —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —é–∑–µ—Ä–∞
 */
void Server::removeUser(User *user) {
	for (unsigned int i = 0; i != this->users.size(); i++) {
		if (user == users[i]) {
			users[i]->leaveAllChannels();
			users.erase(users.begin() + i);
			break;
		}
	}
}

/**
 * —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É pollfd –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞ —Å–ª—É—à–∞–µ–º—ã—Ö —Ñ–¥—à–Ω–∏–∫–æ–≤
 * @param fd —Ñ–¥
 */
void Server::removePollfd(int fd) {
	for (unsigned int i = 0; i < fds.size(); i++) {
		if (fd == fds[i].fd) {
			this->fds.erase(fds.begin() + i);
			break;
		}
	}
}

/**
 * —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
 * @param channelName –∏–º—è –∫–∞–Ω–∞–ª–∞
 */
void Server::removeChannel(std::string channelName) {
	for (unsigned int i = 0; i < this->channels.size(); i++) {
		if (channelName == this->channels[i]->getChannelName()) {
			this->channels.erase(channels.begin() + i);
			break;
		}
	}
}
